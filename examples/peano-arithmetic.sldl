Type number {
    Suc(X),
    e,
}

Atom {
    e,
}

Predicate {
    Suc(n: number) -> {
        Suc(e)
        Suc(X)
    }
    Eq(x: number, y: number) -> {
        Eq(e, e)
        Eq(Suc(X), Suc(X)),
    },
    Add(x: number, y: number, z: number) -> {
        Add(X, e, X),
        Add(X, Suc(e), Suc(X)),
    },
}

Sentence {
    Suc(n) -> "The succesor of" + n,
    Add(x, y, z) -> "The sum of" + x + "and" + y + z,
    Eq(x, y) -> x + "is equals to" + y,
}

Main {
    <Add(x, y, z)>
        <Add::x Suc(e) />
        <Add::y Suc(Suc(e)) />
        <Add::z Suc(Suc(Suc(e))) />
    </Add>
}