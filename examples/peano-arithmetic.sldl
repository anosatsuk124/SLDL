Type number {
    suc(X),
    e,
}

Atom {
    e,
}

Predicate {
    Suc(n: number) -> {
        suc(e)
        suc(X)
    }
    Eq(x: number, y: number) -> {
        eq(e, e)
        eq(suc(X), suc(X)),
    },
    Add(x: number, y: number, z: number) -> {
        add(X, e, X),
        add(X, suc(e), suc(X)),
    },
}

Sentence {
    Suc(n) -> `The succesor of $n`,
    Add(x, y, z) -> `The sum of $x and $y is $z`,
    Eq(x, y) -> `$x is equals to $y`,
}

Main {
    <Add(x, y, z)>
        <Add::x Suc(e) />
        <Add::y Suc(Suc(e)) />
        <Add::z Suc(Suc(Suc(e))) />
    </Add>
}