Type number {
    Suc(X),
    e,
}

Atom {
    e,
}

Predicate {
    Suc(n: number) -> {
        Suc(e)
        Suc(X)
    }
    Eq(x: number, y: number) -> {
        Eq(e, e)
        Eq(Suc(X), Suc(X)),
    },
    Add(x: number, y: number, z: number) -> {
        Add(X, e, X),
        Add(X, Suc(e), Suc(X)),
    },
}

Sentence {
    Suc(n) -> "The succesor of" + n,
    Add(x, y, z) -> {
        sum: "The sum of " + x + " and " + y + z,
        solved: "The solution is " + (x | y),
    }
    Eq(x, y) -> x + " is equals to " + y,
}

Main {
    <Add x="Suc(e)" y="Suc(Suc(e))", z="{X}">
        <sentence />
    </ Add>
    <Add x="Suc(e)" y="Suc()"
}